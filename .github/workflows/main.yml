name: MLOps - Train and Deploy Translator

on:
  push:
    branches:
      - main # Trigger on push to main
  workflow_dispatch: # Allow manual trigger

jobs:
  train_and_push_model:
    runs-on: ubuntu-latest # Or a self-hosted runner with GPU if needed for faster training
    environment: production # Optional: if you set up environments with secrets

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train model and push to Hugging Face Hub
        env:
          # Secrets must be configured in GitHub repository settings
          # (Settings > Secrets and variables > Actions > New repository secret)
          HF_HUB_TOKEN_WRITE: ${{ secrets.HF_HUB_TOKEN_WRITE }}
          HF_HUB_TOKEN_READ: ${{ secrets.HF_HUB_TOKEN_READ || secrets.HF_HUB_TOKEN_WRITE }} # Use read token if available, else write token
          HF_MODEL_ID: ${{ secrets.HF_MODEL_ID }} # e.g., YourUser/YourModel
          BASE_MODEL_ID: "Helsinki-NLP/opus-mt-ko-en" # Or from secrets if configurable
          DATASET_ID: "klei22/korean-english-jamon-parallel-corpora" # Or from secrets
          DATASET_FILE: "ko_ja_en.parquet" # Or from secrets
          PAPAGO_CLIENT_ID: ${{ secrets.PAPAGO_CLIENT_ID }} # Needed if any part of training/eval uses it
          PAPAGO_CLIENT_SECRET: ${{ secrets.PAPAGO_CLIENT_SECRET }}
          # You can add other training params from config.py here as env vars if needed
          # e.g., NUM_TRAIN_EPOCHS: 3
          PYTHONPATH: ${{ github.workspace }} # Ensures src.module imports work
        run: |
          echo "Starting training script via GitHub Actions..."
          # The train.sh script will execute src/train_model.py
          # Ensure train.sh is executable if not already: chmod +x ./scripts/train.sh
          ./scripts/train.sh

      # Optional: Build and Push Docker image to a registry (e.g., GitHub Container Registry - GHCR)
      - name: Log in to GitHub Container Registry
        if: success() && github.event_name != 'pull_request' # Only run on merge to main/manual trigger
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN is automatically available

      - name: Build and push Docker image
        if: success() && github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/ko-en-translator:latest # Example tag, adjust as needed
          # Pass build arguments for runtime ENVs that Dockerfile uses as ARG for default ENVs
          # build-args: |
          #   HF_MODEL_ID=${{ secrets.HF_MODEL_ID }}
          #   HF_HUB_TOKEN_READ=${{ secrets.HF_HUB_TOKEN_READ || secrets.HF_HUB_TOKEN_WRITE }}

    outputs:
      hf_model_id: ${{ secrets.HF_MODEL_ID }} # Make model ID available to other jobs if needed

  # Optional: Deploy job (example, depends on your deployment target)
  # deploy_to_cloud_run:
  #   needs: train_and_push_model
  #   if: success() && github.event_name != 'pull_request'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy to Google Cloud Run
  #       uses: google-github-actions/deploy-cloudrun@v2
  #       with:
  #         service: ko-en-translator-service # Your Cloud Run service name
  #         image: ghcr.io/${{ github.repository_owner }}/ko-en-translator:latest
  #         region: your-gcp-region
  #         credentials: ${{ secrets.GCP_SA_KEY }} # Google Cloud service account key
  #         env_vars: |
  #           HF_MODEL_ID=${{ needs.train_and_push_model.outputs.hf_model_id }}
  #           HF_HUB_TOKEN_READ=${{ secrets.HF_HUB_TOKEN_READ || secrets.HF_HUB_TOKEN_WRITE }}
  #           PAPAGO_CLIENT_ID=${{ secrets.PAPAGO_CLIENT_ID }}
  #           PAPAGO_CLIENT_SECRET=${{ secrets.PAPAGO_CLIENT_SECRET }}